How did viewing the diff between two versions of a file help you see the bug that was introduced?

The diff functionality lets me focus quickly on the relevant parts of the file.  
It's not natural to compare two different files.  
The mind must process it in discrete chunks, and it can be tedious, more error prone, and takes much longer. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It leads to a few major efficiency improvements.
It makes it easier to revert changes and fix mistakes.
It encourages you to implement changes to the code in a logical, structured way.
It encourages you to make big changes without concerns about introducing errors.  

What do you think are the pros and cons of manually choosing when to create a commit like you do in Git, vs having versions automatically saved, like Google Docs does?

The manual commit only introduces slightly more overhead, but it leads to significant improvements.
It encourages you to organize along the "one commit for each logical change" philosophy.
It makes reviewing commits easier.
It gives you control over commiting important changes.
It gives you control over when to share and room to experiment.

Why do you think some version control systems, like Git, allow saving files in one commit, while others, like Google Docs, treat each file seperately?

Commiting files together helps adhere to "one logical change to each commit."
When files are interdependent, committing files together makes it easier to reconstruct previous versions.
With automatic commit, it may be difficult to collect commits from multiple files in a meaningful way.

How can you use the commands git log and git diff to view the history of files?
Git Log allows you to view all of the different commit id's and commit messages.  Git Diff then allows you to run a comparison between any two commits.

How might using version control make you more confident to make changes that could break something?
It makes it much easier to track down changes and revert to an earlier, working version of the program.

Now that you have your workspace set up, what do you want to try using Git for?
I would like to try using it with an actual repository on the web.
I would also like to experiment with where exactly this repository information is being stored.